//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Baran.Ferroalloy.Automation.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class dbAfrzEntities : DbContext
    {
        public dbAfrzEntities()
            : base("name=dbAfrzEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<tabBanks> tabBanks { get; set; }
        public virtual DbSet<tabCategories> tabCategories { get; set; }
        public virtual DbSet<tabCoInformation> tabCoInformation { get; set; }
        public virtual DbSet<tabCurrentAffairs> tabCurrentAffairs { get; set; }
        public virtual DbSet<tabDepartments> tabDepartments { get; set; }
        public virtual DbSet<tabEmployees> tabEmployees { get; set; }
        public virtual DbSet<tabEmployeesBankInfo> tabEmployeesBankInfo { get; set; }
        public virtual DbSet<tabEquipName> tabEquipName { get; set; }
        public virtual DbSet<tabFamSettings> tabFamSettings { get; set; }
        public virtual DbSet<tabInvoiceItems> tabInvoiceItems { get; set; }
        public virtual DbSet<tabInvoices> tabInvoices { get; set; }
        public virtual DbSet<tabLoadingLadles> tabLoadingLadles { get; set; }
        public virtual DbSet<tabMaintenanceFurnaceEquips> tabMaintenanceFurnaceEquips { get; set; }
        public virtual DbSet<tabMaintenanceItems> tabMaintenanceItems { get; set; }
        public virtual DbSet<tabMaintenanceParts> tabMaintenanceParts { get; set; }
        public virtual DbSet<tabMaintenances> tabMaintenances { get; set; }
        public virtual DbSet<tabMeasurementUnits> tabMeasurementUnits { get; set; }
        public virtual DbSet<tabProductionMeltLoadings> tabProductionMeltLoadings { get; set; }
        public virtual DbSet<tabProjects> tabProjects { get; set; }
        public virtual DbSet<tabProperties> tabProperties { get; set; }
        public virtual DbSet<tabProvinces> tabProvinces { get; set; }
        public virtual DbSet<tabRequestItems> tabRequestItems { get; set; }
        public virtual DbSet<tabRequests> tabRequests { get; set; }
        public virtual DbSet<tabShifts> tabShifts { get; set; }
        public virtual DbSet<tabShiftType> tabShiftType { get; set; }
        public virtual DbSet<tabStoreGetOutItems> tabStoreGetOutItems { get; set; }
        public virtual DbSet<tabStoreGetOuts> tabStoreGetOuts { get; set; }
        public virtual DbSet<tabStuffMaterials> tabStuffMaterials { get; set; }
        public virtual DbSet<tabStuffProperties> tabStuffProperties { get; set; }
        public virtual DbSet<tabStuffSections> tabStuffSections { get; set; }
        public virtual DbSet<tabStuffTypes> tabStuffTypes { get; set; }
        public virtual DbSet<tabSubDepartments> tabSubDepartments { get; set; }
        public virtual DbSet<tabSubdepartmentSubsets> tabSubdepartmentSubsets { get; set; }
        public virtual DbSet<tabSubprojects> tabSubprojects { get; set; }
        public virtual DbSet<tabSubZones> tabSubZones { get; set; }
        public virtual DbSet<tabTagParts> tabTagParts { get; set; }
        public virtual DbSet<tabVendors> tabVendors { get; set; }
        public virtual DbSet<tabZones> tabZones { get; set; }
        public virtual DbSet<VieEmployeesInfo> VieEmployeesInfo { get; set; }
        public virtual DbSet<tabPartTypes> tabPartTypes { get; set; }
        public virtual DbSet<tabTechnicalDocumentItems> tabTechnicalDocumentItems { get; set; }
        public virtual DbSet<tabUsers> tabUsers { get; set; }
        public virtual DbSet<tabStores> tabStores { get; set; }
        public virtual DbSet<tabPosts> tabPosts { get; set; }
        public virtual DbSet<tabEquipSamples> tabEquipSamples { get; set; }
        public virtual DbSet<tabPartName> tabPartName { get; set; }
        public virtual DbSet<tabPartBranch> tabPartBranch { get; set; }
        public virtual DbSet<tabPartSubBranch> tabPartSubBranch { get; set; }
        public virtual DbSet<tabCompanies> tabCompanies { get; set; }
        public virtual DbSet<tabLocationes> tabLocationes { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
